# Snakemake workflow for phased mapping with pairtools
# Juan Caballero
# (C) 2024

import yaml
from pathlib import Path

# Set variables
#wildcard_constraints: sample=r".+\d+"

SAMPLES, = glob_wildcards(
    Path(config['fastq_dir']) / '{sample}_R1.fastq.gz'
)

PHASETYPES = [
    config['hap_1'],
    config['hap_2'],
    'unphased',
    'trans'
]

PHASEFILTER = [
    '(phase1=="0") and (phase2=="0")',
    '(phase1=="1") and (phase2=="1")',
    '(phase1==".") or (phase2==".")',
    '(phase1!=phase2) and (phase1!=".") and (phase2!=".") and (phase1!="!") and (phase2!="!")'
]
PHASEDIC = dict(map(lambda i,j : (i,j) , PHASETYPES, PHASEFILTER))

if config['mode'] == 'allelic':
    REF='diploid_genome'
    BWAPAR=config['bwa_parameters']['diploid_genome']
else:
    REF='nmask_genome'
    BWAPAR=config['bwa_parameters']['nmask_genome']

# Define function that returns pair files (phased or unphased), based on the reference.
def ret_pair(wildcards):
    if config['mode'] == 'allelic':
        # Phased setting
        return f"04_pairing/{wildcards.sample}.{wildcards.ref}.phased.pairs.gz"
    else:
        return f"04_pairing/{wildcards.sample}.{wildcards.ref}.pairs.gz"

def ret_respair(wildcards):
    if config['mode'] == 'allelic':
        # Phased setting
        return f"04_pairing/{wildcards.sample}.{wildcards.ref}.phased.pairs.gz"
    else:
        return f"04_pairing/{wildcards.sample}.{wildcards.ref}.pairs.gz"



# before running the process
onstart:
    print("\n==== Pairtools Phased Pipeline starts ====")
    print("Configuration:")
    print(config)
    print("=" * 80)
    print()

# main workflow
rule all:
    input:
        "09_multiqc/multiqc_report.html",
        expand("07_cooler/{sample}.{ref}.{phasetype}.mcool", sample = SAMPLES, ref = REF, phasetype = PHASETYPES)
        #"dist_vs_counts.png"

rule fastp:
    input:
        fq1 = config['fastq_dir'] + "/{sample}_R1.fastq.gz",
        fq2 = config['fastq_dir'] + "/{sample}_R2.fastq.gz"
    output:
        trim_fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        trim_fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        html_rep = "01_preprocessing/{sample}_report.html",
        json_rep = "01_preprocessing/{sample}_report.json"
    threads: 10
    shell:
        """
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html_rep} \
            -j {output.json_rep}
        """

if config['mode'] == 'allelic':
    rule diploid_genome:
        input:
            genome = config["genome"],
            vcf = config["variants"]
        output:
            genome = "02_bwa_index/diploid_genome.fa.gz"
        threads: 4
        params:
            hap1 = config["hap_1"],
            hap2 = config["hap_2"]
        shell:
            """
            bcftools consensus \
                --fasta-ref {input.genome} \
                --haplotype 1 {input.vcf} \
                --sample {params.hap1} \
                | sed -E 's/(>[^[:space:]]+).*/\\1_{params.hap1}/g' \
                | bgzip -c > genome_{params.hap1}.fa.gz

            bcftools consensus \
                --fasta-ref {input.genome} \
                --haplotype 1 {input.vcf} \
                --sample {params.hap2} \
                | sed -E 's/(>[^[:space:]]+).*/\\1_{params.hap2}/g' \
                | bgzip -c > genome_{params.hap2}.fa.gz

            cat genome_{params.hap1}.fa.gz genome_{params.hap2}.fa.gz \
                > {output.genome}

            rm genome_{params.hap1}.fa.gz genome_{params.hap2}.fa.gz
            """

    rule bwa_index_diploid_genome:
        input:
            genome = "02_bwa_index/diploid_genome.fa.gz"
        output:
            index = "02_bwa_index/diploid_genome.fa.gz.bwt"
        threads: 2
        resources:
            mem_mb = 50000
        shell:
            """
            bwa index {input.genome}
            """

else: 
    rule bwa_index:
        input:
            fna = config['genome']
        output:
            index = "02_bwa_index/nmask_genome.fa.gz.bwt"
        threads: 2
        resources:
            mem_mb = 50000
        shell:
            """
            ln -s {input.fna} 02_bwa_index/nmask_genome.fa.gz
            bwa index 02_bwa_index/nmask_genome.fa.gz
            """

rule chr_sizes:
    input:
        bwaix = "02_bwa_index/{ref}.fa.gz.bwt"
    output:
        chromsize = "02_bwa_index/{ref}.chromsizes"
    params:
        fnagz = lambda wildcards, input: Path(input.bwaix).with_suffix('')
    threads: 1
    shell:
        """
        samtools faidx {params.fnagz}
        cut -f1,2 {params.fnagz}.fai > {output.chromsize}
        """

rule bwa_mapping:
    input:
        fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        ix = "02_bwa_index/{ref}.fa.gz.bwt"
    output:
        bam = "03_mapping/{sample}.{ref}.bam"
    threads: 30
    params:
      bwathreads = 20,
      fna = lambda wildcards, input: Path(input.ix).with_suffix(''),
      mapparams = BWAPAR
      
    resources:
      mem_mb = 3000
    shell:
        """
        bwa mem \
            {params.mapparams} \
            -t {params.bwathreads} \
            {params.fna} \
            {input.fq1} \
            {input.fq2} \
        | samtools view -@ 8 -b \
        > {output.bam}
        """

rule pairtools_parse:
    input:
        bam = "03_mapping/{sample}.{ref}.bam",
        chr_sizes = "02_bwa_index/{ref}.chromsizes"
    output:
        pairs = "04_pairing/{sample}.{ref}.pairs.gz"
    params:
        minmapq = 40,
        cols = lambda wildcards: '--add-columns XB,AS,XS' if config['mode'] == 'allelic' else ''
    #threads: 12
    shell:
        """
        pairtools parse \
            --min-mapq {params.minmapq} \
            {params.cols} \
            --drop-sam \
            --walks-policy 5unique \
            -c {input.chr_sizes} \
            {input.bam} \
            -o {output.pairs}
        """

rule pairtools_phase:
    input:
        pairs = "04_pairing/{sample}.{ref}.pairs.gz"
    output:
        pairs = "04_pairing/{sample}.{ref}.phased.pairs.gz"
    params:
        hap1 = config["hap_1"],
        hap2 = config["hap_2"]
    threads: 12
    shell:
        """
        pairtools phase \
            --phase-suffixes _{params.hap1} _{params.hap2} \
            --tag-mode XB \
            --clean-output \
            {input.pairs} -o {output.pairs}
        """

rule pairtools_sort:
    input:
        ret_pair
    output:
        pairs = "04_pairing/{sample}.{ref}.pairs.sorted.gz"
    threads: 20
    shell:
        """
        pairtools sort \
            {input} \
            -o {output.pairs} \
            --memory 20G
        """

rule pairtools_dedup:
    input:
        pairs = "04_pairing/{sample}.{ref}.pairs.sorted.gz"
    output:
        pairs = "04_pairing/{sample}.{ref}.pairs.dedup.gz",
        stats = "04_pairing/{sample}.{ref}.pairs.dedup.stats"
    params:
        extra_cols = lambda wildcards: '--extra-col-pair phase1 phase2'  if config['mode']=='allelic' else ''
    threads: 12
    shell:
        """
        pairtools dedup \
            --mark-dups \
            {params.extra_cols} \
            --output-dups - \
            --output-unmapped - \
            --output-stats {output.stats} \
            -o {output.pairs} \
            {input.pairs}
        """

rule pairtools_filter_phased:
    input:
        pairs = "04_pairing/{sample}.{ref}.pairs.dedup.gz"
    output:
        stats = "05_pair_phase/{sample}.{ref}.{phasetype}.pairs.stats",
        pairs = "05_pair_phase/{sample}.{ref}.{phasetype}.pairs.gz"
    params:
        filterparam = lambda wildcards: PHASEDIC[wildcards.phasetype]
    resources:
        mem_mb = 1000
    threads: 12
    shell:
        """
        pairtools select \
            '{params.filterparam}' \
            {input.pairs} \
            -o {output.pairs}
        pairtools stats {output.pairs} -o {output.stats}
        """

rule cooler_convert:
    input:
        pairs = "05_pair_phase/{sample}.{ref}.{phasetype}.pairs.gz",
    output:
        cool = "06_cooler/{sample}.{ref}.{phasetype}.cool"
    threads: 12
    params:
        binsize = config['binsize']
        cooler = "-c1 2 -p1 3 -c2 4 -p2 5"
    shell:
        """
        if [[ {input.pairs} =~ "unphased" ]]
        then
            touch {output.cool}
        else
            cooler cload pairs {params.cooler} -p {threads} {input.chromsize}:{params.binsize} {input.pairs} {output.cool}
        fi
        """

rule cooler_zoom:
    input:
        cool = "06_cooler/{sample}.{ref}.{phasetype}.cool"
    output:
        mcoool = "06_cooler/{sample}.{ref}.{phasetype}.mcool"
    threads: 12
    params:
        param = "--balance"
    shell:
        """
        if [[ {input.cool} =~ "unphased" ]]
        then
            touch {output.mcool}
        else
            cooler zoomify {params.param} -p {threads} {input.cool}
        fi
        """


## Merge the samples if asked
#rule merge_matrices:
#      input:
#          lambda wildcards: expand("08_HiC_matrices/{sample}_"+config['matrixFile_suffix']+".cool", sample = sample_dict[wildcards.group])
#      output:
#          matrix = "08_HiC_matrices/mergedSamples_{group}_"+config['matrixFile_suffix']+".cool"
#      shell:
#          "hicSumMatrices -m {input} -o {output.matrix}"

## Merge the bins if asked
#rule merge_bins:
#     input:
#         "HiC_matrices/{sample}_"+config['matrixFile_suffix']+".cool"
#     output:
#         matrix = "08_HiC_matrices/{sample}_Mbins" + str(config["nBinsToMerge"]) + "_" +config['matrixFile_suffix']+".cool"
#     params:
#         num_bins=config['nBinsToMerge']
#     shell:
#         "hicMergeMatrixBins -m {input} -nb {params.num_bins} -o {output.matrix}"

## diagnostic plots
rule diagnostic_plot:
    input:
        cool = "07_cooler/{sample}.{ref}.{phasetype}.cool"
    output:
        plot = "08_HiC_matrices/QCplots/{sample}.{ref}.{phasetype}.diagnostic_plot.pdf",
        mad = "08_HiC_matrices/QCplots/{sample}.{ref}.{phasetype}.mad_threshold.out"
    params:
        chr = lambda wildcards: " --chromosomes " + chromosomes if config['chromosomes'] else ""
    shell:
       "hicCorrectMatrix diagnostic_plot {params.chr} -m {input.cool} -o {output.plot} 2> {output.mad} "


# Compute MAD score thresholds
#rule compute_thresholds:
#   input:
#      mad = "08_HiC_matrices/QCplots/{sample}_diploid_genome_{phasetype}_mad_threshold.out"
#   output:
#      out = "09_HiC_matrices_corrected/logs/thresholds_{sample}_diploid_genome_{phasetype}.out"
#   shell:
#         "madscore=$(grep \"mad threshold \" {input.mad} | sed 's/INFO:hicexplorer.hicCorrectMatrix:mad threshold //g');"
#         "upper=$(echo -3*$madscore | bc);"
#         "echo $madscore \" \" $upper >> {output.out}"


## Correct matrices
#if config['correctionMethod'] == 'ICE':
#    rule correct_matrix:
#        input:
#            matrix = "07_cooler/{sample}_diploid_genome_{phasetype}.cool",
#            correct = "09_HiC_matrices_corrected/logs/thresholds_{sample}_diploid_genome_{phasetype}.out"
#        output:
#            out = "09_HiC_matrices_corrected/{sample}_diploid_genome_{phasetype}_corrected.cool"
#        params:
#            #chr = lambda wildcards: " --chromosomes " + chromosomes if chromosomes else ""
#        shell:
#            "thresholds=$(cat \"{input.correct}\");"
#            "hicCorrectMatrix correct --correctionMethod ICE --filterThreshold $thresholds"
#            "  -m {input.matrix} -o {output.out} >> {input.correct}"

#else:
#     rule correct_matrix:
#         input:
#            matrix = "07_cooler/{sample}_diploid_genome_{phasetype}.cool"
#         output:
#            out = "09_HiC_matrices_corrected/{sample}_diploid_genome_{phasetype}_corrected.cool"
#         params:
#            #chr = lambda wildcards: " --chromosomes " + chromosomes if chromosomes else ""
#         shell:
#             "hicCorrectMatrix correct --correctionMethod KR "
#             "  -m {input.matrix} -o {output.out}"

## Call TADs
#rule call_tads:
#    input:
#        cool = "09_HiC_matrices_corrected/{sample}_diploid_genome_{phasetype}_corrected.cool"
#    output:
#        tad = "10_TADs/{sample}_diploid_genome_{phasetype}_corrected_boundaries.bed"
#    params:
#        prefix = "10_TADs/{sample}_diploid_genome_{phasetype}_corrected",
#        params = config["findTADParams"]
#    threads: lambda wildcards: 10 if 10 < max_thread else max_thread
#    
#    shell:
#        "hicFindTADs -m {input.cool} "
#        "{params.params} "
#        "--correctForMultipleTesting bonferroni "
#        "-p {threads} "
#        "--outPrefix {params.prefix}"

##compare matrices using hicPlotDistVsCounts
#rule distvscounts:
#   input:
#        matrices = expand("09_HiC_matrices_corrected/{sample}_diploid_genome_{phasetype}_corrected.cool", sample = SAMPLES, phasetype = PHASETYPES)
#   output:
#        out = "dist_vs_counts.png"
#   params:
#        function_params = lambda wildcards: config["distVsCountParams"] if config["distVsCountParams"] else " "
#   shell:
#       "hicPlotDistVsCounts -m  {input.matrices} -o {output.out} {params.function_params}"


rule multiqc:
    input:
        stats = expand(
            "04_pairing/{sample}.{ref}.pairs.dedup.stats",
            sample=SAMPLES,
            ref=REF
        ),
        phasedstats = expand(
            "05_phase_stats/{sample}.{ref}.{phasetype}.pairs.stats",
            sample=SAMPLES,
            ref=REF,
            phasetype=PHASEDIC.keys()
        )
    output:
        html = "09_multiqc/multiqc_report.html"
    params:
        odir = "09_multiqc"
    threads: 1
    shell:
        """
        multiqc \
            --module pairtools \
            -o {params.odir} \
            .
        """

onsuccess:
    print("\n==== Workflow finished successfully! ====\n")
